/*
 *  PFRED: A computational tool for siRNA and antisense design
 *  Copyright (C) 2011 Pfizer, Inc.
 *
 *  This file is part of the PFRED software.
 *
 *  PFRED is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package org.pfred.pme;

import org.pfred.PFREDContext;
import org.pfred.PFREDView;
import org.pfred.model.CustomListDataEvent;
import org.pfred.model.CustomListModel;
import org.pfred.model.Datum;
import org.pfred.util.NameStdizer;
import com.pfizer.rtc.notation.NotationException;
import com.pfizer.rtc.notation.editor.data.RNAPolymer;
import com.pfizer.rtc.notation.editor.editor.MacroMoleculeViewer;
import com.pfizer.rtc.notation.model.Monomer;
import com.pfizer.rtc.notation.model.Nucleotide;
import com.pfizer.rtc.notation.model.PolymerNode;
import com.pfizer.rtc.notation.model.RNAPolymerNode;
import com.pfizer.rtc.notation.tools.ComplexNotationParser;
import com.pfizer.rtc.notation.tools.SimpleNotationParser;
import java.awt.BorderLayout;
import java.awt.Component;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.swing.JFrame;
import javax.swing.JOptionPane;


public class ModificationTemplateFrame extends javax.swing.JFrame {
    private Component owner;

     private PFREDContext context = null;
    private MacroMoleculeViewer viewer;
    private boolean canceled = true;

    private static String BASE_OPTION_1 = "A 5meC G T";
    private static String BASE_OPTION_2 = "A C G T";
    private static String BASE_OPTION_3 = "A C G U";

    /** Creates new form ModificationTemplateFrame */
    public ModificationTemplateFrame() {
        initComponents();
    }

       public ModificationTemplateFrame(JFrame parent, PFREDContext context) {
       // super(parent, true);
        this.context = context;
        this.owner = parent;
        setTitle("Create Modification Template");
      
        initComponents();
        initMoleculeViewer();
        initComboBoxes();

        updateControls();
             setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        LRCheckBox = new javax.swing.JCheckBox();
        MOECheckBox = new javax.swing.JCheckBox();
        dRCheckBox = new javax.swing.JCheckBox();
        RCheckBox = new javax.swing.JCheckBox();
        mRCheckBox = new javax.swing.JCheckBox();
        fRCheckBox = new javax.swing.JCheckBox();
        otherSugarCheckBox = new javax.swing.JCheckBox();
        LRComboBox = new javax.swing.JComboBox();
        MOEComboBox = new javax.swing.JComboBox();
        dRComboBox = new javax.swing.JComboBox();
        RComboBox = new javax.swing.JComboBox();
        mRComboBox = new javax.swing.JComboBox();
        fRComboBox = new javax.swing.JComboBox();
        otherSugarComboBox = new javax.swing.JComboBox();
        otherSugarTextBox = new javax.swing.JTextField();
        cpgCheckBox = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        applyButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        columnsComboBox = new javax.swing.JComboBox();
        newColumnNameTextField = new javax.swing.JTextField();
        structurePanel = new javax.swing.JPanel();
        sequenceViewPanel = new javax.swing.JPanel();
        editButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        LRCheckBox.setSelected(true);
        LRCheckBox.setText("LR");
        LRCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LRCheckBoxActionPerformed(evt);
            }
        });

        MOECheckBox.setSelected(true);
        MOECheckBox.setText("MOE");
        MOECheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MOECheckBoxActionPerformed(evt);
            }
        });

        dRCheckBox.setSelected(true);
        dRCheckBox.setText("dR");
        dRCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dRCheckBoxActionPerformed(evt);
            }
        });

        RCheckBox.setSelected(true);
        RCheckBox.setText("R");
        RCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RCheckBoxActionPerformed(evt);
            }
        });

        mRCheckBox.setSelected(true);
        mRCheckBox.setText("mR");
        mRCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mRCheckBoxActionPerformed(evt);
            }
        });

        fRCheckBox.setSelected(true);
        fRCheckBox.setText("fR");
        fRCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fRCheckBoxActionPerformed(evt);
            }
        });

        otherSugarCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                otherSugarCheckBoxActionPerformed(evt);
            }
        });

        cpgCheckBox.setSelected(true);
        cpgCheckBox.setText("CpG Rule");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LRCheckBox)
                            .addComponent(MOECheckBox)
                            .addComponent(dRCheckBox)
                            .addComponent(mRCheckBox)
                            .addComponent(fRCheckBox)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(otherSugarCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(otherSugarTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(MOEComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(LRComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(57, 57, 57)
                                .addComponent(cpgCheckBox))
                            .addComponent(dRComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(RComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mRComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fRComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(otherSugarComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(RCheckBox))
                .addContainerGap(164, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LRCheckBox)
                    .addComponent(LRComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cpgCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MOECheckBox)
                    .addComponent(MOEComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dRCheckBox)
                    .addComponent(dRComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RCheckBox)
                    .addComponent(RComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mRCheckBox)
                    .addComponent(mRComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fRCheckBox)
                    .addComponent(fRComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(otherSugarComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(otherSugarTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(otherSugarCheckBox))
                .addContainerGap(68, Short.MAX_VALUE))
        );

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        applyButton.setText("Apply");
        applyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(222, 222, 222)
                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(applyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(212, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(applyButton))
                .addContainerGap())
        );

        jLabel1.setText("Column");

        jLabel2.setText("New Column Name");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(newColumnNameTextField)
                    .addComponent(columnsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(columnsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(newColumnNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(3, Short.MAX_VALUE))
        );

        structurePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Template", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        sequenceViewPanel.setBorder(new javax.swing.border.MatteBorder(null));
        sequenceViewPanel.setLayout(new java.awt.BorderLayout());

        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout structurePanelLayout = new javax.swing.GroupLayout(structurePanel);
        structurePanel.setLayout(structurePanelLayout);
        structurePanelLayout.setHorizontalGroup(
            structurePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(structurePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(structurePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sequenceViewPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE)
                    .addComponent(editButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        structurePanelLayout.setVerticalGroup(
            structurePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, structurePanelLayout.createSequentialGroup()
                .addComponent(sequenceViewPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editButton))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(structurePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(213, Short.MAX_VALUE))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(structurePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LRCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LRCheckBoxActionPerformed

        updateControls();
}//GEN-LAST:event_LRCheckBoxActionPerformed

    private void MOECheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MOECheckBoxActionPerformed
        updateControls();
}//GEN-LAST:event_MOECheckBoxActionPerformed

    private void dRCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dRCheckBoxActionPerformed
        updateControls();
}//GEN-LAST:event_dRCheckBoxActionPerformed

    private void RCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RCheckBoxActionPerformed
        updateControls();
}//GEN-LAST:event_RCheckBoxActionPerformed

    private void mRCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mRCheckBoxActionPerformed
        updateControls();
}//GEN-LAST:event_mRCheckBoxActionPerformed

    private void fRCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fRCheckBoxActionPerformed
        updateControls();
}//GEN-LAST:event_fRCheckBoxActionPerformed

    private void otherSugarCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_otherSugarCheckBoxActionPerformed
        updateControls();
}//GEN-LAST:event_otherSugarCheckBoxActionPerformed


        private void initComboBoxes() {

        ArrayList oligos = context.getDataStore().getOligoListModel().getAllData();
        int size = oligos.size();

        ArrayList names = new ArrayList();

        //get the list of all properties
        for (int i = 0; i < size; i++) {
            Datum datum = (Datum) oligos.get(i);
            ArrayList propNames = datum.propertyNames();
            for (int j = 0; j < propNames.size(); j++) {
                if (names.contains(propNames.get(j)) == false) {
                    names.add(propNames.get(j));
                }
            }
        }


        /* for (int i = 0; i < size; i++) {
        Oligo oligo = (Oligo) oligos.get(i);

        for (int j = 0; j < names.size(); j++) {
        String propName = (String) names.get(j);

        //ingore these special String columns as they will be natural sequences
        if (propName.equals(Oligo.PARENT_ANTISENSE_OLIGO_PROP)
        || propName.equals(Oligo.PARENT_SENSE_OLIGO_PROP)
        || propName.equals(Oligo.PARENT_DNA_OLIGO_PROP)) {
        continue;
        }

        Object value = oligo.getProperty(propName);

        //remove any non-RNAPolymer properties
        if (value.getClass().toString().endsWith("RNAPolymer") == false) {
        names.remove(propName);
        } else {
        if (isNaturalSequence((RNAPolymer) value) == false) {
        names.remove(propName);
        }
        }
        }
        }
         */
        for (int i = 0; i < names.size(); i++) {
            columnsComboBox.addItem((String) names.get(i));
        }



        ///base combos
        ArrayList baseOptions = new ArrayList();
        baseOptions.add("G A 5meC T");
        baseOptions.add("C A G T");
        baseOptions.add("A C G U");

        LRComboBox.addItem(BASE_OPTION_1);
        LRComboBox.addItem(BASE_OPTION_2);
        LRComboBox.addItem(BASE_OPTION_3);
        LRComboBox.setSelectedItem(BASE_OPTION_1);

        MOEComboBox.addItem(BASE_OPTION_1);
        MOEComboBox.addItem(BASE_OPTION_2);
        MOEComboBox.addItem(BASE_OPTION_3);
        MOEComboBox.setSelectedItem(BASE_OPTION_1);

        dRComboBox.addItem(BASE_OPTION_1);
        dRComboBox.addItem(BASE_OPTION_2);
        dRComboBox.addItem(BASE_OPTION_3);
        dRComboBox.setSelectedItem(BASE_OPTION_2);

        RComboBox.addItem(BASE_OPTION_1);
        RComboBox.addItem(BASE_OPTION_2);
        RComboBox.addItem(BASE_OPTION_3);
        RComboBox.setSelectedItem(BASE_OPTION_3);

        mRComboBox.addItem(BASE_OPTION_1);
        mRComboBox.addItem(BASE_OPTION_2);
        mRComboBox.addItem(BASE_OPTION_3);
        mRComboBox.setSelectedItem(BASE_OPTION_3);

        fRComboBox.addItem(BASE_OPTION_1);
        fRComboBox.addItem(BASE_OPTION_2);
        fRComboBox.addItem(BASE_OPTION_3);
        fRComboBox.setSelectedItem(BASE_OPTION_3);

        otherSugarComboBox.addItem(BASE_OPTION_1);
        otherSugarComboBox.addItem(BASE_OPTION_2);
        otherSugarComboBox.addItem(BASE_OPTION_3);
        otherSugarComboBox.setSelectedItem(BASE_OPTION_1);
    }
  private void initMoleculeViewer() {
        viewer = new MacroMoleculeViewer(true);

        sequenceViewPanel.add(BorderLayout.CENTER, viewer);
    }

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
      //  canceled = true;
      //  dispose();
        setVisible(false);
}//GEN-LAST:event_cancelButtonActionPerformed

    private void applyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyButtonActionPerformed

        boolean OK = validateTemplate();

        if (OK) {
            OK = applyTemplate();
            if (OK) {
                //canceled = false;
                //dispose();
                  setVisible(false);
            }

        }
    }//GEN-LAST:event_applyButtonActionPerformed


    private void loadMoleculeEditor() {

         MoleculeEditor editor = PFREDView.invokePME(viewer, this);

        if (null == editor) {
            JOptionPane.showMessageDialog(this, "Unable to launch PME\n", "Launch PME Error", JOptionPane.WARNING_MESSAGE);
        }


    }


    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed

        loadMoleculeEditor();
        /*
         SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                loadMoleculeEditor();
            }
        });*/
}//GEN-LAST:event_editButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
    /*        boolean OK = validateTemplate();

        if (OK) {
            OK = applyTemplate();
            if (OK) {
                //canceled = false;
                //dispose();
                  setVisible(false);
            }

        }*/
    }//GEN-LAST:event_formWindowClosing

      private boolean validateTemplate() {

        String notation = viewer.getNotation();

        if (notation == null || notation.length() == 0) {
            JOptionPane.showMessageDialog(owner, "You must specify a template", "Unable to apply template", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        List<RNAPolymerNode> nodeList = null;
        try {
            nodeList = ComplexNotationParser.getRNAPolymerNodeList(notation);
        } catch (Exception ex) {
        JOptionPane.showMessageDialog(owner, "You must specify a single stranded template", "Unable to apply template", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (nodeList.size() != 1) {
            JOptionPane.showMessageDialog(owner, "You must specify a single stranded template", "Unable to apply template", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        if (columnsComboBox.getSelectedItem() == null || ((String) columnsComboBox.getSelectedItem()).length() == 0) {
            JOptionPane.showMessageDialog(owner, "You must select a column", "Unable to apply template", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;

    }
     private void updateControls() {
        LRComboBox.setEnabled(LRCheckBox.isSelected());
        MOEComboBox.setEnabled(MOECheckBox.isSelected());
        dRComboBox.setEnabled(dRCheckBox.isSelected());
        RComboBox.setEnabled(RCheckBox.isSelected());
        mRComboBox.setEnabled(mRCheckBox.isSelected());
        fRComboBox.setEnabled(fRCheckBox.isSelected());
        otherSugarComboBox.setEnabled(otherSugarCheckBox.isSelected());
        otherSugarTextBox.setEnabled(otherSugarCheckBox.isSelected());
    }

       private HashMap<String, String> getBaseRules() {
        HashMap<String, String> rules = new HashMap<String, String>();

        if (LRCheckBox.isSelected()) {
            rules.put("LR", (String) LRComboBox.getSelectedItem());
        }
        if (MOECheckBox.isSelected()) {
            rules.put("MOE", (String) MOEComboBox.getSelectedItem());
        }
        if (dRCheckBox.isSelected()) {
            rules.put("dR", (String) dRComboBox.getSelectedItem());
        }
        if (RCheckBox.isSelected()) {
            rules.put("R", (String) RComboBox.getSelectedItem());
        }
        if (mRCheckBox.isSelected()) {
            rules.put("mR", (String) mRComboBox.getSelectedItem());
        }
        if (fRCheckBox.isSelected()) {
            rules.put("fR", (String) fRComboBox.getSelectedItem());
        }
        if (otherSugarCheckBox.isSelected()) {
            rules.put(otherSugarTextBox.getText(), (String) otherSugarComboBox.getSelectedItem());
        }

        return rules;
    }




    private boolean applyTemplate() {

        CustomListModel list_model = context.getDataStore().getOligoListModel();
        String[] names = list_model.getAllPropertyNames();

        String newPropName = newColumnNameTextField.getText();

        newPropName = NameStdizer.correctProperName(newPropName);
        boolean nameExist = false;
        for (int cnt = 0; cnt < names.length; cnt++) {
            if (newPropName.equals(names[cnt])) {
                nameExist = true;
                break;
            }
        }

        if (nameExist) {
            int option = JOptionPane.showConfirmDialog(owner, "Property " + newPropName
                    + " already exists. Do you want to overwrite its value?",
                    "Property already exists", JOptionPane.OK_CANCEL_OPTION);
            if (option == JOptionPane.CANCEL_OPTION) {
                return false;
            }
        }

        String templateNotation = viewer.getNotation();

        String selectedColumnName = (String) columnsComboBox.getSelectedItem();

        ArrayList sorted = list_model.getAllData();
        int size = sorted.size();
        int failCount = 0;
        for (int i = 0; i < size; i++) {
            Datum oligo = list_model.getDatum(i);
            Object value = oligo.getProperty(selectedColumnName);
            String notation = "";
            if (value.getClass().toString().endsWith("RNAPolymer")) {
                notation = ((RNAPolymer) value).getNotation();
            }
            if (value.getClass().toString().endsWith("String")) {
                String str = (String) value;
                for (int j = 0; j < str.length(); j++) {
                    if (notation.length() > 0) {
                        notation = notation + ".";
                    }
                    notation = notation + "R(" + str.charAt(j) + ")P";
                }
                try {
                    notation = SimpleNotationParser.getComplextNotationForRNA(notation);
                } catch (Exception ex) {
              }
            }
            try {
                String result = applyTemplate(notation, templateNotation);
                if (result.length() == 0) {
                    failCount++;
                }
                list_model.addProperty(newPropName, result, oligo);

            } catch (Exception ex) {
                ex.printStackTrace();
                list_model.addProperty(newPropName, "", oligo);
            }

        }

        list_model.setDataIsChanging(false,
                CustomListDataEvent.TYPE_PROPERTY_NUMBER_CHANGED);

        if (failCount > 0) {

            JOptionPane.showMessageDialog(owner,
                    "Warning: Unable to calculate for " + failCount
                    + " out of " + size + " rows.");
        }


        return true;


    }
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ModificationTemplateFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox LRCheckBox;
    private javax.swing.JComboBox LRComboBox;
    private javax.swing.JCheckBox MOECheckBox;
    private javax.swing.JComboBox MOEComboBox;
    private javax.swing.JCheckBox RCheckBox;
    private javax.swing.JComboBox RComboBox;
    private javax.swing.JButton applyButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox columnsComboBox;
    private javax.swing.JCheckBox cpgCheckBox;
    private javax.swing.JCheckBox dRCheckBox;
    private javax.swing.JComboBox dRComboBox;
    private javax.swing.JButton editButton;
    private javax.swing.JCheckBox fRCheckBox;
    private javax.swing.JComboBox fRComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JCheckBox mRCheckBox;
    private javax.swing.JComboBox mRComboBox;
    private javax.swing.JTextField newColumnNameTextField;
    private javax.swing.JCheckBox otherSugarCheckBox;
    private javax.swing.JComboBox otherSugarComboBox;
    private javax.swing.JTextField otherSugarTextBox;
    private javax.swing.JPanel sequenceViewPanel;
    private javax.swing.JPanel structurePanel;
    // End of variables declaration//GEN-END:variables

     private String applyTemplate(String polymer, String template) {

        HashMap<String, String> rulesMap = getBaseRules();


        List<PolymerNode> templateNodes;
        List<PolymerNode> polymerNodes;

        try {
            templateNodes = ComplexNotationParser.getPolymerNodeList(template);
            polymerNodes = ComplexNotationParser.getPolymerNodeList(polymer);
        } catch (NotationException ex) {
            return "";
        }

        if (templateNodes.size() != polymerNodes.size()) {
            return "";
        }
        int size = polymerNodes.size();

        StringBuffer nodeSB = new StringBuffer();

        for (int i = 0; i < size; i++) {
            try {
                PolymerNode polymerNode = polymerNodes.get(i);
                PolymerNode templateNode = templateNodes.get(i);

                List<Nucleotide> polymerNucleotides = SimpleNotationParser.getNucleotideList(polymerNode.getLabel(), false);
                List<Nucleotide> templateNucleotides = SimpleNotationParser.getNucleotideList(templateNode.getLabel(), false);
                if (polymerNucleotides.size() != templateNucleotides.size()) {
                    return "";
                }

                for (int j = 0; j < polymerNucleotides.size(); j++) {
                    Nucleotide polymerNuc = polymerNucleotides.get(j);
                    Nucleotide templateNuc = templateNucleotides.get(j);

                    String templateNotation = templateNuc.getNotation();


                    Monomer polyMonomer = polymerNuc.getBaseMonomer();
                    Monomer templateMonomer = templateNuc.getBaseMonomer();

                    Monomer polySugarMonomer = polymerNuc.getSugarMonomer();
                    Monomer templateSugarMonomer = templateNuc.getSugarMonomer();

                    String currentSugar = templateSugarMonomer.getAlternateId();
                    String currentBase = polyMonomer.getAlternateId();


                    for (Iterator it = rulesMap.entrySet().iterator(); it.hasNext();) {
                        Map.Entry entry = (Map.Entry) it.next();
                        String sugar = (String) entry.getKey();
                        String rule = (String) entry.getValue();

                        String[] validBases;
                        validBases = rule.split(" ");

                        if (sugar.equalsIgnoreCase(currentSugar)) {
                            if (currentBase.equalsIgnoreCase("A")) {
                                currentBase = validBases[0];
                            } else if (currentBase.equalsIgnoreCase("C")) {
                                currentBase = validBases[1];
                            } else if (currentBase.equalsIgnoreCase("G")) {
                                currentBase = validBases[2];
                            } else if (currentBase.equalsIgnoreCase("T")) {
                                currentBase = validBases[3];
                            } else if (currentBase.equalsIgnoreCase("U")) {
                                currentBase = validBases[3];
                            }
                        }

                    }

                    // check CpG rule
                    if (cpgCheckBox.isSelected()) {
                        boolean nextBaseIsG = false;
                        if (j < polymerNucleotides.size() - 1) {
                            Nucleotide nextPolymer = polymerNucleotides.get(j + 1);
                            String nextBase = nextPolymer.getBaseMonomer().getAlternateId();
                            String nextSugar = templateNucleotides.get(j+1).getSugarMonomer().getAlternateId();
                            System.out.println("currentBase="+currentBase +" currentSugar="+ currentSugar+" nextBase="+nextBase+" nextSugar="+nextSugar);
                            if (nextBase.equalsIgnoreCase("G") && nextSugar.equalsIgnoreCase("dR")
                                 && currentBase.equalsIgnoreCase("C")
                                 && currentSugar.equalsIgnoreCase("dR")) {
                                currentBase="5meC";
                            }
                        }
                    }
                    String result = SimpleNotationParser.replaceMonomer(templateNotation, Monomer.NUCLIEC_ACID_POLYMER_TYPE, templateMonomer.getAlternateId(), currentBase);

                    // String result = SimpleNotationParser.replaceMonomer(templateNotation, Monomer.NUCLIEC_ACID_POLYMER_TYPE, templateMonomer.getAlternateId(), polyMonomer.getAlternateId());

                    templateNuc.setNotation(result);

                }
                String newNotation = getSimpleNotationFromNucleotideList(templateNucleotides);
                //    System.out.println("newNotation=" + newNotation);

                if (nodeSB.length() > 0) {
                    nodeSB.append("|");
                }
                nodeSB.append(templateNode.getId() + "{" + newNotation + "}");

            } catch (Exception ex) {
                return "";
            }
        }
        String edgeString = "";
        String basePairString = "";
        String nodeLabelString = "";
        String otherString = "";
        try {
            edgeString = ComplexNotationParser.getAllEdgeString(template);
            basePairString = ComplexNotationParser.getAllBasePairString(template);
            nodeLabelString = ComplexNotationParser.getAllNodeLabelString(template);
            otherString = ComplexNotationParser.getOtherString(template);
        } catch (NotationException ex) {
            return "";
        }


        String result = nodeSB.toString() + "$" + edgeString + "$" + basePairString + "$" + nodeLabelString.toString() + "$" + otherString;

        return result;

    }

      private static String getSimpleNotationFromNucleotideList(List<Nucleotide> nucleotideList) {
        StringBuffer sb = new StringBuffer();
        for (Nucleotide nuc : nucleotideList) {

            if (sb.length() > 0) {
                sb.append(SimpleNotationParser.GROUP_LEVEL_DELIMITER);
            }
            String notion = nuc.getNotation();
            sb.append(notion);
        }
        return sb.toString();
    }


}
